// 1번

#include <stdlib.h>
#include <stdio.h>

int main(void)
{
	int num, i;
	double* ptr, sum = 0;
	printf("요소의 개수: ");
	scanf("%d", &num);

	ptr = (double*)malloc(num * sizeof(double));
	if (ptr == NULL)
	{
		printf("메모리 할당 실패 \n");
		exit(0);
	}

	for (i = 0; i < num; i++)
	{
		printf("배열의 요소를 입력하시오: ");
		scanf("%lf", ptr + i);
		sum += *(ptr + i);
	}
	printf("합 = %lf \n", sum);
	free(ptr);

	return 0;
}

// 3번

#include <stdlib.h>
#include <stdio.h>

int main(void)
{
	int *p;
	int i, items = 100, sum = 0;
	srand(time(NULL));

	p = (int*)malloc(items * sizeof(int));

	for (i = 0; i < items; i++)
	{
		p[i] = rand() % 100;
		sum += p[i];
	}
	printf("평균=%d \n", sum / items);
	free(p);

	return 0;
}

// 4번

#include <stdlib.h>
#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

int main(void)
{
	int *p;
	int i, items = 100, sum = 0;
	srand(time(NULL));

	p = (int*)malloc(items * sizeof(int));
	//if (ptr == NULL)
	//{
		//printf("메모리 할당 실패 \n");
		//exit(0);
	//}

	for (i = 0; i < items; i++)
	{
		p[i] = rand() % 100;
	}
	int big = p[0];
	for (i = 1; i < items; i++)
	{
		if (big < p[i])
			big = p[i];
	}
	printf("최대값 = %d \n", big);
	free(p);

	return 0;
}

// 5번

#include <stdlib.h>
#include <stdio.h>
#define _CRT_SECURE_NO_WARNINGS

typedef struct rec
{
	int i;
	float PI;
	char A;
} my_record; 
int main(void)
{
	my_record *p= (my_record *)malloc(sizeof(my_record));
	if (p == NULL)
	{
		printf("메모리 할당 실패 \n");
		exit(1);
	}
	p->i = 10;
	p->PI = 3.14;
	p->A = 'a';

	printf("%d \n", p->i);
	printf("%f \n", p->PI);
	printf("%c \n", p->A);

	free(p);

	return 0;
}

// 6번

#include <stdlib.h>
#include <stdio.h>

struct course
{ 
	char subject[30];
	double marks; 
}; 
int main(void)
{
	struct course* ptr;
	int i, noOfRecords;
	printf("구조체의 개수: ");
	scanf("%d", &noOfRecords);
	ptr = (struct course*)malloc(noOfRecords * sizeof(struct course));
	for (i = 0; i < noOfRecords; i++)
	{
		printf("과목 이름과 성적을 입력하시오:");
		scanf("%s %lf", &(ptr[i].subject), &(ptr[i].marks));
	}
	printf("저장된 정보 출력:\n");
	for (i = 0; i < noOfRecords; ++i)
		printf("%s\t%lf\n", (ptr + i)->subject, (ptr + i)->marks);
	return 0;
}

	p[0] = *p;
	p[1] = *(p + 1);
	p[2] = *(p + 2);

	p->marks;  // 이게 가장 편하다함 뭔지는 모름 ㄹㅇㅋㅋ
	(p + 1)->marks;
	(*p).marks;
	p[0].marks
